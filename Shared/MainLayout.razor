@inherits LayoutComponentBase
@namespace RecipeAZ.Shared
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject IDbContextFactory<DataContext> _contextFactory
@inject IWebHostEnvironment Environment
@inject JsonDbService _jsonDbService
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using RecipeAZ.Services

<MudThemeProvider Theme="RecipeTheme"/>
<MudDialogProvider />
<MudSnackbarProvider />

<CascadingValue Value="@User" Name="UserParam">    

<MudLayout>
    <MudAppBar Elevation="1" Color="Color.Success">
        
        <MudText Typo="Typo.h5" Class="ml-3 clickable" @onclick="ReturnToIndex" Style="margin-right:10px">RecipeAZ</MudText>
        <MudIconButton Icon="@Icons.Material.Filled.FileUpload" OnClick="@_jsonDbService.ExportToJson"/>
        <MudIconButton Icon="@Icons.Material.Filled.FileDownload" OnClick="@_jsonDbService.ImportFromJson" />
        <MudSpacer />
        <MudGrid Spacing="1" Justify="Justify.FlexEnd">
            <MudItem>
                <MudIconButton Icon="@Icons.Material.Filled.Search" Size="Size.Large" Style="margin-right:0px"
                    OnClick="GoToSearch" />
            </MudItem>
            <MudItem>
                <MudAutocomplete T="string" Variant="Variant.Text" DisableUnderLine="true" Margin="Margin.Dense" Label="Search Recipes"
                    Style="margin-left:0px;margin-right:0px;width:300px;background-color:#fff1ce;border-radius:6px"
                    @bind-Text="_searchValue" SearchFunc="SearchRecipes"
                    ResetValueOnEmptyText="true" CoerceText="false"/>
            </MudItem>
            <MudItem Class="vcenter mr-5">
                <MudButton Size="Size.Small"
                    @onclick="() => GoToBrowse()">
                    Advanced search
                </MudButton>
            </MudItem>            
            <MudItem Class="vcenter">
                <AuthorizeView>
                    <Authorized>
                        <MudButton Class="mr-5" OnClick="NewRecipe" Variant="Variant.Outlined">+New Recipe</MudButton>
                    </Authorized>
                </AuthorizeView>
            </MudItem>
        </MudGrid>
        <MudSpacer />
        <LoginDisplay />
    </MudAppBar>
    @*<MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>*@
    
    <MudMainContent Class="">
        @Body
    </MudMainContent>
        
</MudLayout>
</CascadingValue>


@code {

    public AppUser? User { get; set; }
    private string? UserId { get; set; }
    //public DataContext? DataContext { get; set; }
    private string _searchValue = string.Empty;
    MudTheme RecipeTheme = new MudTheme()
    {
        Palette = new Palette() {
            Primary = Colors.Blue.Default,
            Secondary = Colors.Green.Accent4,
            Error = Colors.Red.Default,
            Warning = Colors.Orange.Accent1,
            Success = Colors.Green.Lighten2
        }
    };
    private void ReturnToIndex() {
        navigationManager.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        using var DataContext = await _contextFactory.CreateDbContextAsync();        
        AuthenticationState authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user != null && user!.Identity != null && user!.Identity!.IsAuthenticated) {
            var userIdClaim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
            if (userIdClaim != null && userIdClaim.Value != null) {
                User = await DataContext.Users.AsNoTracking()
                    .Include(u => u.RecipesILike).AsNoTracking()
                    .Include(u => u.Recipes).AsNoTracking()
                .FirstOrDefaultAsync(u => u.Id == userIdClaim.Value);
                UserId = User?.Id;
                //DataContext.Entry(User).State = EntityState.Detached;
            }
        }               
    }

    private async Task<IEnumerable<string>> SearchRecipes(string searchText) {
        using var DataContext = await _contextFactory.CreateDbContextAsync();
        if (searchText.Length < 2) {
            return null;
        }
        searchText = searchText.ToLower();
        return await DataContext.Recipes
            .Include(r => r.RecipeIngredients)
            .Include(r => r.RecipeTags)
                .ThenInclude(rt => rt.Tag)
            .Where(r => r.Name.ToLower().Contains(searchText)
            || r.RecipeIngredients.Any(ri => ri.Name.ToLower().Contains(searchText))
            || r.RecipeTags.Any(rt => rt.Tag.Name.ToLower().Contains(searchText)))
            .Select(r => r.Name).ToListAsync();        

    }
    private void UpdateSearchText(string update) {
        _searchValue = update;
    }
    private async Task GoToSearch() {
        using var DataContext = await _contextFactory.CreateDbContextAsync();
        List<string> recipes;
       recipes = await DataContext.Recipes.Where(r => r.Name.ToLower() == _searchValue.ToLower()).Select(r => r.RecipeId).ToListAsync();
        _searchValue = string.Empty;

        if (recipes.Count == 1) {
            navigationManager.NavigateTo($"/recipe/{ recipes[0] }", true);
        } 
    }
    private void GoToBrowse() {
        string sanitizedTerms = System.Net.WebUtility.UrlEncode(_searchValue);
        Console.WriteLine("SANITIZED" + sanitizedTerms);
        navigationManager.NavigateTo($"/browse/{ _searchValue }");
    }

    private void NewRecipe() {
        navigationManager.NavigateTo("/recipe");
    }

   

}

