@inject IDbContextFactory<DataContext> _contextFactory
@inject TextProcessing _textProcessing
@inject NavHelperService _navHelp
@inject RecipeAZ.Services.RecipeService _recipeService
@inject IJSRuntime _jsRuntime
@inherits EditableList<RecipeIngredient>


<div style="color:black">
        <MudPaper MinWidth="400px" Elevation="0">
        <MudDropContainer T="RecipeIngredient" Items="RecipeIngredientsList"
            ItemsSelector="@((item, dropzone) => item?.Order.ToString() == dropzone)" 
            ItemDropped="ItemDropUpdateOrder" Class="d-flex flex-wrap flex-grow-1">
            <ChildContent>                
                <MudList Clickable="true" Class="pl-0">
                    @foreach (RecipeIngredient ri in (ItemRecipe?.RecipeIngredients ?? new List<RecipeIngredient>()).OrderBy(ri => ri.Order)) {
                        string dropzone = ri.Order.ToString();                        
                        <MudDropZone T="RecipeIngredient" Identifier="@dropzone" AllowReorder="false" ItemIsDisabled="i => !CanEdit || !Editing" />
                    }
                </MudList>
            </ChildContent>
            <ItemRenderer>
                <MudListItem>
                    <MudGrid>
                        <div class="d-flex d-row">
                            @if (CanEdit && Editing) {
                                <MudIcon Icon="@Icons.Material.Filled.DragHandle"/>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                    Size="Size.Small"
                                    aria-label="delete"
                                    @onclick="async (e) => {
                                            await _recipeService.RemoveRecipeIngredient(context);
                                        }" />

                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                    Size="Size.Small"
                                    aria-label="edit"
                                    @onclick="() => {
                                        tempIngredient = new RecipeIngredient {
                                            Name = context.Name,
                                            Notes = context.Notes,
                                            Ingredient = context.Ingredient,
                                            Recipe = context.Recipe,
                                            Amount = context.Amount,
                                            Order = context.Order
                                        };
                                        editingIngredient = context;
                                        ingredientEditOpen = true;
                                    }" />
                            }

                            <div class="mr-1" style="margin-top: 0.75rem; margin-bottom: 0;"><TextLinkMixComponent Text="@context.Ingredient?.Name" />:</div>

                            <div style="margin-top: 0.75rem; margin-bottom: 0;">@context.Amount</div>

                            <MudToggleIconButton @bind-Toggled="detailsOpen[context]"
                                Icon="@DetailsToggleIcon(context)"
                                ToggledIcon="@Icons.Material.Filled.ExpandMore"
                                Color="Color.Success"
                                Disabled="@string.IsNullOrEmpty(context.Notes)" />
                        </div>
                        @if (detailsOpen.ContainsKey(context) && detailsOpen[context]) {
                            <MudItem xs="12">
                                <MudPaper Class="pl-2" Elevation="0" Style="font-style:italic;">
                                    <TextLinkMixComponent Text="@context.Notes" />
                                </MudPaper>
                            </MudItem>
                        }
                    </MudGrid>
                </MudListItem>
            </ItemRenderer>
        </MudDropContainer>
            
        </MudPaper>
        @if (CanEdit && Editing) {
            <MudToggleIconButton @bind-Toggled="@ShowNewIngredientInput"
                Icon="@Icons.Material.Filled.Add"
                ToggledIcon="@Icons.Material.Filled.Remove" />
            @if (ShowNewIngredientInput) {
                <MudAutocomplete T="string" Label="Name your ingredient" 
                    Value="LastItem.Name" TextChanged="OnTextChanged"
                    CoerceText="false" CoerceValue="false" ResetValueOnEmptyText="true"
                    SearchFunc="FindIngredientMatches" />
                @*<MudTextField @bind-Value="LastItem.Name" Label="New Ingredient" Immediate="true"></MudTextField>*@
                <MudTextField @bind-Value="LastItem.Amount" Label="Amount"></MudTextField>
                <MudTextField @bind-Value="LastItem.Notes" Label="Notes"></MudTextField>
                <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Disabled="@CannotAddItem" aria-label="add" 
                    @onclick="() => { AddRecipeIngredient(LastItem); }" />
            }   
        }         
</div>

@if (ItemRecipe != null) {
    <MudPopover Open="@ingredientEditOpen" Fixed="false" Class="px-4 pt-4">
        <div class="d-flex flex-column"> 
            <div class="d-flex d-row">
                <MudAutocomplete T="string" Label="Name your ingredient" id="linkable-ingredient-name"
                    Value="tempIngredient.Name" TextChanged="UpdateEditingIngredient"
                    CoerceText="false" CoerceValue="false" ResetValueOnEmptyText="true"
                    SearchFunc="_recipeService.FindIngredientMatches" />
                <MudIconButton Icon="@Icons.Material.Filled.ContentPasteSearch"
                    Title="Insert link to another recipe"
                    @onclick="async () => {   
                        _editText = tempIngredient.Name;
                        CurrentEditAction = new Action<string>((newText) => tempIngredient.Name = newText);
                        await OnSearchLinkClick(_nameId); 
                    }" />
            </div>
            
            <MudTextField @bind-Value="tempIngredient.Amount" Lines="1" />                
          
            <div class="d-flex d-row">
                <MudTextField @bind-Value="tempIngredient.Notes" Lines="5" id="linkable-ingredient-details"/>
                <MudIconButton Icon="@Icons.Material.Filled.ContentPasteSearch"
                    Title="Insert link to another recipe"
                    @onclick="async () => {
                        _editText = tempIngredient.Notes;
                        CurrentEditAction = new Action<string>((newText) => tempIngredient.Notes = newText);
                        await OnSearchLinkClick(_detailsId);
                    }" />
            </div>            
            
            <div class="d-flex d-row">
                Dont forget to save your recipe!
                <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Class="ml-auto mr-0 mb-1" Color="Color.Success" Size="Size.Large" @onclick="() => {
                    editingIngredient.Name = tempIngredient.Name;
                    editingIngredient.Notes = tempIngredient.Notes;
                    editingIngredient.Amount = tempIngredient.Amount;
                    editingIngredient.Order = tempIngredient.Order;
                    editingIngredient.Recipe = tempIngredient.Recipe;                    
                           
                    ingredientEditOpen = false;
                    AddRecipeIngredient(editingIngredient);

                }" />
                <MudIconButton Icon="@Icons.Material.Filled.Cancel" Class="ml-0 mr-0 mb-1" Color="Color.Error" Size="Size.Large" @onclick="async () => {
                    editingIngredient = tempIngredient;
                    tempIngredient = null;
                    ingredientEditOpen = false;
                    StateHasChanged();
                }" />
            </div>            
        </div>
        <InsertRecipeLinkComponent Text="@_editText" CursorStart="@_cursorStart" CursorEnd="@_cursorEnd"
            SearchOpen="@_searchLinkOpen" OnLinkAdded="HandleLinkAdded" OnClose="() => _searchLinkOpen=false" />
    </MudPopover>
}

@code {

    private bool ShowNewIngredientInput { get; set; } = false;
    private Action<string> CurrentEditAction { get; set; }
    private Dictionary<RecipeIngredient, bool> detailsOpen = new Dictionary<RecipeIngredient, bool>();
    private bool ingredientEditOpen = false;
    private string editingName;
    private string editingAmount;
    private string editingNotes;
    private List<RecipeIngredient> RecipeIngredientsList =>
        ItemRecipe?.RecipeIngredients?.Where(ingredient => ingredient != null).ToList() ?? new List<RecipeIngredient>();
    private RecipeIngredient? editingIngredient;
    private RecipeIngredient? tempIngredient;
    private int editingIngredientIndex;
    private List<string> AllIngredients = new();
    private Ingredient _newIngredientToRemove = null;
    private bool _searchLinkOpen = false;
    private int _cursorStart;
    private int _cursorEnd;
    private string _nameId = "linkable-ingredient-name";
    private string _detailsId = "linkable-ingredient-details";
    private string _editText = string.Empty;

    private void OnTextChanged(string value) {
        LastItem.Name = value;
    }
    private void UpdateEditingIngredient(string value) {
        tempIngredient.Name = value;
    }

    private string DetailsToggleIcon(RecipeIngredient ri) {
        return ri.Notes == string.Empty ? null : Icons.Material.Filled.ChevronRight;
    }
    private async Task OnSearchLinkClick(string id) {
        CursorSpan span = await GetCursorSpan(id);
        _cursorStart = span.Item1;
        _cursorEnd = span.Item2;
        _searchLinkOpen = true;
    }
    private async Task<CursorSpan> GetCursorSpan(string id) {
        CursorSpan result = await _jsRuntime.InvokeAsync<CursorSpan>("getCursorPosition", id);
        return result;
    }
    private void HandleLinkAdded(string newText) {
        CurrentEditAction?.Invoke(newText);
        _searchLinkOpen = false;
    }

    
}