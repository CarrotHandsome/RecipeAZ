@using RecipeAZ.Models
@using Microsoft.EntityFrameworkCore
@using RecipeAZ.Interfaces
@inject IDbContextFactory<DataContext> _contextFactory
@inherits EditableList<RecipeIngredient>


<div>
    <h4>Ingredients</h4>    
        <MudPaper MinWidth="600px">
            <MudList Class="pl-3">
                @foreach (RecipeIngredient ri in ItemRecipe!.RecipeIngredients!.OrderBy(ri => ri.Order)) {
                bool hasNoNotes = ri.Notes == string.Empty;
                <MudListItem>
                        <MudGrid>
                            <MudItem>
                                <div style="margin-top: 0.75rem; margin-bottom: 0;">@ri.Ingredient?.Name:</div>
                            </MudItem>
                            <MudItem>
                                    <div style="margin-top: 0.75rem; margin-bottom: 0;">@ri.Amount</div>
                            </MudItem>
                            <MudItem>
                                <MudToggleIconButton @bind-Toggled="detailsOpen[ri]"
                                    Icon="@Icons.Material.Filled.ChevronRight"
                                    ToggledIcon="@Icons.Material.Filled.ExpandMore"
                                    Disabled="@hasNoNotes" />
                            </MudItem>
                            @if (CanEdit && Editing) {
                                <MudItem xs="1">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                    Size="Size.Small"
                                        aria-label="delete" 
                                        @onclick="(e) => {
                                            ItemRecipe!.RecipeIngredients.Remove(ri);
                                            StateHasChanged();
                                        }" />
                                
                                </MudItem>
                                <MudItem xs="1">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                        Size="Size.Small"
                                        aria-label="edit"
                                        @onclick="() => {
                                            tempIngredient = new RecipeIngredient {
                                                Name = ri.Name,
                                                Notes = ri.Notes,
                                                Ingredient = ri.Ingredient,
                                                Recipe = ri.Recipe,
                                                Amount = ri.Amount,
                                                Order = ri.Order,
                                                Before = ri.Before,
                                                After = ri.After
                                            };
                                            editingIngredient = ri;
                                            ingredientEditOpen = true;
                                    }" />
                                </MudItem>
                            }                            
                        </MudGrid>
                        @if (detailsOpen[ri]) {
                            <MudPaper Class="pa-3">@ri.Notes</MudPaper>
                        }
                    </MudListItem>
                                                   
                }
            </MudList>
        </MudPaper>
        @if (CanEdit && Editing) {
            <MudToggleIconButton @bind-Toggled="@ShowNewIngredientInput"
                Icon="@Icons.Material.Filled.Add"
                ToggledIcon="@Icons.Material.Filled.Remove" />
            @if (ShowNewIngredientInput) {
                <MudAutocomplete T="string" Label="Name your ingredient" 
                    Value="LastItem.Name" TextChanged="OnTextChanged"
                    CoerceText="false" CoerceValue="false" ResetValueOnEmptyText="true"
                    SearchFunc="FindIngredientMatches" />
                @*<MudTextField @bind-Value="LastItem.Name" Label="New Ingredient" Immediate="true"></MudTextField>*@
                <MudTextField @bind-Value="LastItem.Amount" Label="Amount"></MudTextField>
                <MudTextField @bind-Value="LastItem.Notes" Label="Notes"></MudTextField>
                <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Disabled="@CannotAddItem" aria-label="add" 
                    @onclick="() => { AddRecipeIngredient(LastItem); }" />
            }   
        }         
</div>

@if (ItemRecipe != null) {
    <MudPopover Open="@ingredientEditOpen" Fixed="false" Class="px-4 pt-4">
        <div class="d-flex flex-column">            
            <MudAutocomplete T="string" Label="Name your ingredient"
                Value="tempIngredient.Name" TextChanged="UpdateEditingIngredient"
                CoerceText="false" CoerceValue="false" ResetValueOnEmptyText="true"
                SearchFunc="FindIngredientMatches" />
            <MudTextField @bind-Value="tempIngredient.Amount" Lines="1" />
            <MudTextField @bind-Value="tempIngredient.Notes" Lines="5" />
            <div class="d-flex d-row">
                <MudIconButton Icon="@Icons.Material.Filled.Save" Class="ml-auto mr-0 mb-1" Color="Color.Success" Size="Size.Large" @onclick="() => {
                    editingIngredient.Name = tempIngredient.Name;
                    editingIngredient.Notes = tempIngredient.Notes;
                    editingIngredient.Amount = tempIngredient.Amount;
                    editingIngredient.Order = tempIngredient.Order;
                    editingIngredient.Recipe = tempIngredient.Recipe;                    
                           
                    ingredientEditOpen = false;
                    AddRecipeIngredient(editingIngredient);

                }" />
                <MudIconButton Icon="@Icons.Material.Filled.Cancel" Class="ml-0 mr-0 mb-1" Color="Color.Error" Size="Size.Large" @onclick="async () => {
                    editingIngredient = tempIngredient;
                    tempIngredient = null;
                    ingredientEditOpen = false;
                    StateHasChanged();
                }" />
            </div>
            
        </div>
    </MudPopover>
}

@code {

    private bool ShowNewIngredientInput { get; set; } = false;
    private DataContext? _dataContext;
    private Dictionary<RecipeIngredient, bool> detailsOpen = new Dictionary<RecipeIngredient, bool>();
    private bool ingredientEditOpen = false;
    private string editingName;
    private string editingAmount;
    private string editingNotes;
    private List<RecipeIngredient> RecipeIngredientsList => ItemRecipe.RecipeIngredients.ToList();
    private RecipeIngredient? editingIngredient;
    private RecipeIngredient? tempIngredient;
    private int editingIngredientIndex;
    private List<string> AllIngredients = new();
    private Ingredient _newIngredientToRemove = null;
    //private RecipeIngredient _newRI = new();
    
    private void OnTextChanged(string value) {
        LastItem.Name = value;
    }
    private void UpdateEditingIngredient(string value) {
        tempIngredient.Name = value;
    }
    
}