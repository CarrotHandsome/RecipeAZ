@inject EditService EditService
@inject NavHelperService _navHelp
@inject TextProcessing _textProcessing
@inject IJSRuntime _jsRuntime

<div>
    <h4>Overview</h4>
    <TextLinkMixComponent Text="@Recipe?.Description" />
    @*@foreach (Tuple<string, bool, string> kvp in _textProcessing.ProcessString(Recipe?.Description ?? string.Empty)) {
        if (kvp.Item2) {
            <MudButton Variant="Variant.Text"
               Style="display: inline; margin: 0px; padding: 0px;"
               @onclick="() => {                
                _navHelp.NavigateToRecipe(kvp.Item1);              
            }">@kvp.Item3</MudButton>
        } else {
            <MudText Style="display: inline;">@kvp.Item1</MudText>
        }
    }*@
    @if (CanEdit && Editing) {
        <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" @onclick="() => {
            OriginalOverview = Recipe?.Description ?? string.Empty;
            overviewEditOpen = true;                
        }" />
    }
    
</div>
@if (Recipe != null) {
    <MudPopover Open="@overviewEditOpen" Fixed="false" Class="px-4 pt-4" AnchorOrigin="Origin.TopLeft" 
        Style="width:500px;height:390px;"        
    >
        <div class="d-flex flex-column">
            <MudTextField @bind-Value="Recipe.Description" Lines="15" id="linkable-overview" />
            <MudIconButton Icon="@Icons.Material.Filled.ContentPasteSearch" 
                @onclick="async () => await OnSearchLinkClick(_textId)"
            />
            <InsertRecipeLinkComponent Text="@Recipe.Description" CursorStart="@_cursorStart" CursorEnd="@_cursorEnd" 
                SearchOpen="@_searchLinkOpen" OnLinkAdded="HandleLinkAdded"/>
            <div class="d-flex d-row">
                Don't forget to save your recipe!
                <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Class="ml-auto mr-0 mb-1" Color="Color.Success" Size="Size.Large" @onclick="async () => {                
                    overviewEditOpen = false;
                    StateHasChanged();
                }" />
                <MudIconButton Icon="@Icons.Material.Filled.Cancel" Class="ml-0 mr-0 mb-1" Color="Color.Error" Size="Size.Large" @onclick="async () => {
                    Recipe.Description = OriginalOverview;
                    overviewEditOpen = false;
                    StateHasChanged();
                }" />
            </div>
            
        </div>
    </MudPopover>
}


@code {
    [CascadingParameter(Name = "RecipeParam")]
    public Recipe? Recipe { get; set; }
    [CascadingParameter(Name = "CanEditParam")]
    public bool CanEdit { get; set; }
    [CascadingParameter(Name = "EditingParam")]
    public bool Editing { get; set; }

    private string OriginalOverview { get; set; } = string.Empty;

    private bool overviewEditOpen = false;
    private bool _searchLinkOpen = false;
    private int _cursorStart;
    private int _cursorEnd;
    private string _textId = "linkable-overview";

    private async Task OnSearchLinkClick(string id) {
        CursorSpan span = await GetCursorSpan(id);
        _cursorStart = span.Item1;
        _cursorEnd = span.Item2;
        _searchLinkOpen = true;
    }
    private async Task<CursorSpan> GetCursorSpan(string id) {
        CursorSpan result = await _jsRuntime.InvokeAsync<CursorSpan>("getCursorPosition", id);
        return result;
    } 
    private void HandleLinkAdded(string newText) {
        Recipe.Description = newText;
        _searchLinkOpen = false;
    }

}