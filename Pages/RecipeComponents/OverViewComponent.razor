@inject EditService EditService
@inject NavHelperService _navHelp
@inject TextProcessing _textProcessing
@inject IJSRuntime _jsRuntime

<div style="color:black">
    <MudPaper MinWidth="400px" Elevation="0">
        <TextLinkMixComponent Text="@Recipe?.Description" />
        @if (CanEdit && Editing) {
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" @onclick="() => {
            OriginalOverview = Recipe?.Description ?? string.Empty;
            _overviewEditOpen = true;
        }" />
        }
    </MudPaper>    
    
</div>
@if (Recipe != null) {
    <MudPopover Open="@_overviewEditOpen" Fixed="false" Class="px-4 pt-4" AnchorOrigin="Origin.TopLeft" 
        Style="width:500px;height:390px;" >
        <div class="d-flex flex-column">
            <MudTextField @bind-Value="Recipe.Description" Lines="15" id="linkable-overview" />
                      
            <div class="d-flex d-row">
                <MudIconButton Icon="@Icons.Material.Filled.ContentPasteSearch"
                    Title="Insert link to another recipe"
                    @onclick="async () => await OnSearchLinkClick(_textId)" />
                Don't forget to save your recipe!
                <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Class="ml-auto mr-0 mb-1" Color="Color.Success" 
                    Size="Size.Large" Disabled="_searchLinkOpen" @onclick="async () => {                
                        _overviewEditOpen = false;
                        StateHasChanged();
                }" />
                <MudIconButton Icon="@Icons.Material.Filled.Cancel" Class="ml-0 mr-0 mb-1" Color="Color.Error"
                    Size="Size.Large" Disabled="_searchLinkOpen" @onclick="async () => {
                        Recipe.Description = OriginalOverview;
                        _overviewEditOpen = false;
                        StateHasChanged();
                }" />
            </div>            
        </div>
        <InsertRecipeLinkComponent Text="@Recipe.Description" CursorStart="@_cursorStart" CursorEnd="@_cursorEnd"
            SearchOpen="@_searchLinkOpen" OnLinkAdded="HandleLinkAdded" OnClose="() => _searchLinkOpen=false"/>
    </MudPopover>
    
}


@code {
    [CascadingParameter(Name = "RecipeParam")]
    public Recipe? Recipe { get; set; }
    [CascadingParameter(Name = "CanEditParam")]
    public bool CanEdit { get; set; }
    [CascadingParameter(Name = "EditingParam")]
    public bool Editing { get; set; }
    private string OriginalOverview { get; set; } = string.Empty;

    private bool _overviewEditOpen = false;
    private bool _searchLinkOpen = false;
    private int _cursorStart;
    private int _cursorEnd;
    private string _textId = "linkable-overview";

    private async Task OnSearchLinkClick(string id) {
        CursorSpan span = await GetCursorSpan(id);
        _cursorStart = span.Item1;
        _cursorEnd = span.Item2;
        _searchLinkOpen = true;
    }
    private async Task<CursorSpan> GetCursorSpan(string id) {
        CursorSpan result = await _jsRuntime.InvokeAsync<CursorSpan>("getCursorPosition", id);
        return result;
    } 
    private void HandleLinkAdded(string newText) {
        Recipe.Description = newText;
        _searchLinkOpen = false;
    }

}