@page "/recipe/{id}"
@page "/recipe"

@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Components.Forms
@inject IDbContextFactory<DataContext> _contextFactory
@inject UserManager<AppUser> userManager
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject ISnackbar snackBar
@inject IWebHostEnvironment env
@inject ILogger<LayoutComponent> Logger

<div style="background-color:white;padding:16px;border-radius:10px;">
@if (Recipe != null) {
    
    <MudGrid>
        <MudItem><MudImage Src="@Recipe.ImagePath" Height="200" /></MudItem>
        @if(CanEdit && Editing) {
            <MudItem>
                <MudFileUpload T="IBrowserFile" 
                    FilesChanged="OnImageUpload"
                    Accept="image/jpeg,image/png,image/gif,image/bmp">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                           Color="Color.Info"
                           StartIcon="@Icons.Material.Filled.UploadFile"
                           Size="Size.Large"
                           for="@context" />
                    </ButtonTemplate>
                </MudFileUpload>
            </MudItem>
        }        
    </MudGrid>
    
    
    <div class="view-recipe-container m-2">
        <MudGrid>
            <MudItem Class="pr-1">
                <h3 style="margin-top: 0.5rem; margin-bottom: 0; margin-right: 0;">@Recipe.Name</h3>
            </MudItem>
            @if (CanEdit && Editing) {
                <MudItem Class="pl-0">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" @onclick="() => {
                        OriginalTitle = Recipe?.Name ?? string.Empty;
                        titleEditOpen = true;
                    }" style="margin-top: 0.75rem;" />
                </MudItem>
            }
            <MudItem>
                <MudToggleIconButton Icon="@Icons.Material.Filled.Favorite"                
                    ToggledIcon="@Icons.Material.Filled.Favorite" ToggledColor="Color.Secondary"
                    Disabled="@(!CanEdit)"
                    Toggled="@Liked"
                    ToggledChanged='async (bool toggled) => {
                        if (User != null) {
                            RecipeLike rl = new RecipeLike {
                                AppUserId = User.Id!, RecipeId = Recipe.RecipeId
                            };
                            if (toggled) {
                                await _dataContext.AddAsync(rl);
                            } else {
                                // Retrieve the existing RecipeLike object from the database
                                var existingRl = await _dataContext.FindAsync<RecipeLike>(User.Id!, Recipe.RecipeId);
                                if (existingRl != null) {
                                    _dataContext.Remove(existingRl);
                                }
                            }
                        }
                        Liked = toggled;
                        if (User?.Id != Recipe.UserId) {
                            await SaveRecipe(false);
                            Console.WriteLine($"Recipe is Liked:{Liked} ");
                        }
                }' />
            </MudItem>
            <MudItem Class="d-flex align-center flex-grow-1 gap-0">
                @foreach (RecipeTag recipeTag in Recipe.RecipeTags) {
                    <MudChip Size="Size.Small">
                        <MudText>@recipeTag.Tag.Name</MudText>
                        @if (CanEdit && Editing) {
                            <MudIconButton Icon="@Icons.Material.Outlined.Cancel" 
                                Color="Color.Default" Size="Size.Small"
                                OnClick="@(() => HandleChipClose(recipeTag))" />
                        }
                    </MudChip>
                }
            </MudItem>
            @if (CanEdit && Editing && Recipe.RecipeTags.Count < maxTags) {
                <MudItem Class="d-flex align-center flex-grow-1 gap-4">
                    <MudButton Size="Size.Small" Variant="Variant.Outlined"
                       @onclick="() => { NewTagOpen = true; }"
                    >+New Tag</MudButton>
                </MudItem>
            }

        </MudGrid>
        <MudPopover Open="@NewTagOpen" Fixed="false" Class="px-4">
            <div class="d-flex flex-column">
                <MudAutocomplete 
                    T="string" Label="Enter Tag"
                    Value="NewTagName"
                    TextChanged="OnValueChanged"                    
                    CoerceText="false" CoerceValue="false" ResetValueOnEmptyText="true"
                    SearchFunc="TagSearch"
                    />             
                
                <MudIconButton Icon="@Icons.Material.Filled.Save" OnClick="@AddTag"/>
            </div>
        </MudPopover>
        
        <MudPopover Open="@titleEditOpen" Fixed="false" Class="px-4 pt-4" AnchorOrigin="Origin.TopLeft">
            <div class="d-flex flex-column">
                <MudTextField @bind-Value="Recipe.Name" Variant="Variant.Text" Lines="1" Label="Recipe Title"></MudTextField>
                <div class="d-flex d-row">
                    <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Class="ml-auto mr-0 mb-1" Color="Color.Success" Size="Size.Large" @onclick="async () => {
                        titleEditOpen = false;
                        StateHasChanged();
                    }" />
                    <MudIconButton Icon="@Icons.Material.Filled.Cancel" Class="ml-0 mr-0 mb-1" Color="Color.Error" Size="Size.Large" @onclick="async () => {
                        Recipe.Name = OriginalTitle;
                        titleEditOpen = false;
                        StateHasChanged();
                    }" />
                </div>
                
            </div>
        </MudPopover>

        <div class="recipe-halves">            
            <CascadingValue Value="@Recipe" Name="RecipeParam">   
                <CascadingValue Value="@CanEdit" Name="CanEditParam">
                    <CascadingValue Value="@Editing" Name="EditingParam" >
                        <LeftComponent Id="@Id" OnEditUpdate="@UpdateEditState" />
                        <RightComponent />
                    </CascadingValue>                        
                </CascadingValue>                                                   
            </CascadingValue>
        </div>       
    </div>
    <div>
        @if (Recipe.ParentRecipe != null) {
            <div @onclick="() => NavigateToParent()" class="clickable">Originally copied from @Recipe.ParentRecipe.Name by @Recipe.ParentRecipe.User.UserName</div>
        } 
        </div>
} else {
    <p>Recipe not found.</p>
}
</div>

@code {
    [CascadingParameter(Name = "UserParam")]
    protected AppUser? User { get; set; }
    [Parameter]
    public string? Id { get; set; }
    private DataContext? _dataContext;

    private Recipe? Recipe;

    public bool Liked { get; set; }
    private bool CanEdit { get; set; } = false; //logged in user is owner of recipe
    private bool Editing { get; set; } = false;
    private bool NewTagOpen { get; set; } = false;
    private string NewTagName { get; set; } = string.Empty;
    private string OriginalTitle { get; set; } = string.Empty;
    //private string? UserId { get; set; }
    private int maxTags = 5;
    private bool titleEditOpen { get; set; } = false;


    //private List<string> tags { get; set; } = new();
    private void OnValueChanged(string value) {
        NewTagName = value;
    }

    private void NavigateToParent() {
        navigationManager.NavigateTo($"/recipe/{ Recipe.ParentRecipeId }", true);
    }
}