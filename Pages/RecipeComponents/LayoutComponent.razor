@page "/recipe/{id}"
@page "/recipe"

@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Components.Forms
@inject IDbContextFactory<DataContext> _contextFactory
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject ISnackbar snackBar
@inject IWebHostEnvironment env
@inject ILogger<LayoutComponent> Logger
@inject TextProcessing _textProcessing
@inject NavHelperService _navHelp
@inject RecipeAZ.Services.RecipeService _recipeService

<div style="background-color:white;padding:16px;border-radius:10px;">
    @if (_recipe != null) {
        <div class="d-flex d-row" >
            <div style="min-width:400px;border-style:solid;border-width:1px 0px 1px 1px;border-radius:10px;padding:14px;border-color:#fac951" 
                 >
                <MudImage Src="@_recipe.ImagePath" Height="200" Class="rounded-lg"/>
                @if(CanEdit && Editing) {
                    
                        <MudFileUpload T="IBrowserFile" 
                            FilesChanged="OnImageUpload"
                            Accept="image/jpeg,image/png,image/gif,image/bmp">
                            <ButtonTemplate>
                                <MudButton HtmlTag="label"
                                   Color="Color.Success"
                                   StartIcon="@Icons.Material.Filled.UploadFile"
                                   Size="Size.Large"
                                   for="@context" />
                            </ButtonTemplate>
                        </MudFileUpload>
                    
                }
            </div>
            <div style="padding:10px;border-style:solid;border-width:0px 0px 0px 0px;border-radius:3px;border-color:#81C784;">
                <div><h5 style="text-align:center;">Related Recipes</h5></div>
                
                <MudPaper Width="95%" Height="95%" Elevation="0" Class="overflow-hidden d-flex flex-wrap d-row" Style="width:100%;">
                    
                        @if (_relatedRecipesWeighted != null) {
                            foreach (KeyValuePair<Recipe, int> kvp in _relatedRecipesWeighted.OrderByDescending(r => r.Value).Take(10)) {                              
                                    @if (kvp.Key != null) {     
                                        <div class="related-recipe">
                                            <MudButton Size="Size.Small" Style="position:relative;white-space:nowrap;" 
                                                Variant="Variant.Text" 
                                                Class="mr-4 mb-0 p-0" @onclick="() => _navHelp.NavigateToRecipe(kvp.Key.RecipeId)" >
                                                @kvp.Key?.Name                                                
                                            </MudButton>   
                                            <MudButton Size="Size.Small" Variant="Variant.Filled" Class="custom-small-button"
                                                Style="position:absolute;top:28px;left:5px;height:auto.6em;"
                                                DisableElevation="true"
                                                @onclick="() => _navHelp.NavigateToUser(kvp.Key.User.Id)" >
                                                @TextProcessing.UserAttribution(kvp.Key?.User?.UserName!)
                                            </MudButton>
                                        </div>
                                    }                                    
                               
                            }
                        }                        
                    
                    
                </MudPaper>
            </div>
        </div>
    
    <div class="view-recipe-container m-2">
        <MudGrid>
            <MudItem Class="pr-1">
                <h3 style="margin-top: 0.5rem; margin-bottom: 0; margin-right: 0;">@_recipe.Name</h3>
            </MudItem>
            @if (CanEdit && Editing) {
                <MudItem Class="pl-0">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" @onclick="() => {
                        OriginalTitle = _recipe?.Name ?? string.Empty;
                        TitleEditOpen = true;
                    }" style="margin-top: 0.75rem;" />
                </MudItem>
            }
            <MudItem>
                <MudToggleIconButton Icon="@Icons.Material.Filled.Favorite"                
                    ToggledIcon="@Icons.Material.Filled.Favorite" ToggledColor="Color.Secondary"
                    Disabled="@(User == null)"
                    Toggled="@Liked"
                    ToggledChanged="ToggleLike" />
            </MudItem>
            <MudItem Class="d-flex align-center flex-grow-1 gap-0">
                    @if (_recipe.RecipeTags != null) {
                        foreach (RecipeTag recipeTag in _recipe.RecipeTags.Where(rt => rt.Tag != null)) {
                            <TagChip Tag="@recipeTag.Tag" Removable="@(CanEdit && Editing)" HandleChipClose="HandleChipClose"/>
                        }
                    }
                    
            </MudItem>
            @if (CanEdit && Editing && _recipe.RecipeTags.Count < _maxTags) {
                <MudItem Class="d-flex align-center flex-grow-1 gap-4">
                    <MudButton Size="Size.Small" Variant="Variant.Outlined"
                       @onclick="() => { NewTagOpen = true; }"
                    >+New Tag</MudButton>
                </MudItem>
            }

        </MudGrid>
        <MudPopover Open="@NewTagOpen" Fixed="false" Class="px-4">
            <div class="d-flex flex-column">
                <MudAutocomplete 
                    T="string" Label="Enter Tag"
                    Value="NewTagName"
                    TextChanged="OnValueChanged"                    
                    CoerceText="false" CoerceValue="false" ResetValueOnEmptyText="true"
                    SearchFunc="TagSearch"
                    />             
                
                <MudIconButton Icon="@Icons.Material.Filled.Save" OnClick="@AddTag"/>
                <div class="d-flex d-row">
                    <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Class="ml-auto mr-0 mb-1" Color="Color.Success" 
                        Size="Size.Large" OnClick="AddTag" />
                    <MudIconButton Icon="@Icons.Material.Filled.Cancel" Class="ml-0 mr-0 mb-1" Color="Color.Error" Size="Size.Large" @onclick="async () => {                       
                        NewTagOpen = false;                        
                    }" />
                </div>
            </div>
        </MudPopover>
        
        <MudPopover Open="@TitleEditOpen" Fixed="false" Class="px-4 pt-4" AnchorOrigin="Origin.TopLeft">
            <div class="d-flex flex-column">
                <MudTextField @bind-Value="_recipe.Name" Variant="Variant.Text" Lines="1" Label="Recipe Title"></MudTextField>
                <div class="d-flex d-row">
                    <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Class="ml-auto mr-0 mb-1" Color="Color.Success" Size="Size.Large" @onclick="async () => {
                        TitleEditOpen = false;
                        StateHasChanged();
                    }" />
                    <MudIconButton Icon="@Icons.Material.Filled.Cancel" Class="ml-0 mr-0 mb-1" Color="Color.Error" Size="Size.Large" @onclick="async () => {
                        _recipe.Name = OriginalTitle;
                        TitleEditOpen = false;
                        StateHasChanged();
                    }" />
                </div>
                
            </div>
        </MudPopover>

        <div class="recipe-halves">            
            <CascadingValue Value="@_recipe" Name="RecipeParam">   
                <CascadingValue Value="@CanEdit" Name="CanEditParam">
                    <CascadingValue Value="@Editing" Name="EditingParam" >
                            <div style="border-style:solid;border-width:0px 0px 1px 0px;border-radius:15px;border-color:#fac951">
                            <LeftComponent Id="@Id" OnEditUpdate="@UpdateEditState" />
                        </div>
                            <div style="border-style:solid;border-width:1px 0px 0px 1px;border-radius:15px;border-color:#fac951">
                            <RightComponent />  
                        </div>
                    </CascadingValue>                        
                </CascadingValue>                                                   
            </CascadingValue>
        </div>       
    </div>
    <div>
        @if (_recipe.ParentRecipe != null) {
            <div @onclick="() => NavigateToParent()" class="clickable">Originally copied from @_recipe.ParentRecipe.Name by @_recipe.ParentRecipe.User.UserName</div>
        } 
        </div>
} else {
    <p>Recipe not found.</p>
}
</div>

@code {
    [CascadingParameter(Name= "UserParam")]
    protected AppUser? User { get; set; }
    [Parameter]
    public string? Id { get; set; }    

    public bool Liked { get; set; }
    private bool CanEdit { get; set; } = false; //logged in user is owner of recipe
    private bool Editing { get; set; } = false;
    private bool NewTagOpen { get; set; } = false;
    private string NewTagName { get; set; } = string.Empty;
    private string OriginalTitle { get; set; } = string.Empty;
    private bool TitleEditOpen { get; set; } = false;
    
    private Recipe? _recipe;
    private int _maxTags = 5;
    
    public DataContext _dataContext;
    private Dictionary<Recipe, int> _relatedRecipesWeighted;


    //private List<string> tags { get; set; } = new();
    private void OnValueChanged(string value) {
        NewTagName = value;
    }

    private void NavigateToParent() {
        navigationManager.NavigateTo($"/recipe/{ _recipe.ParentRecipeId }", true);
    }    
}