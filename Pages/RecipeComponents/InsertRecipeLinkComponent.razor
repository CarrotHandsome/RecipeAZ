@inject RecipeAZ.Services.RecipeService _recipeService
@inject IJSRuntime _jsRuntime


<MudPopover Open="@SearchOpen" TransformOrigin="Origin.BottomLeft">
    <MudAutocomplete T="Recipe" Label="Link to a recipe" Value="_searchRecipe"    
        SearchFunc="SearchFunction" ValueChanged="RecipeChanged"
        ToStringFunc="@(r => r == null ? null : ($"{r.Name} by {r.User?.UserName}"))"
    />
    <MudTextField @bind-Value="_linkText" Label="Link Text"></MudTextField>
    <div class="d-flex d-row">
        <MudIconButton Icon="@Icons.Material.Filled.ContentPasteGo" Color="Color.Success" Class="ml-auto mr-0 mb-0"
            @onclick="() => ReplaceTextWithLink()" />
        <MudIconButton Icon="@Icons.Material.Filled.Cancel" Class="ml-0 mr-0 mb-0" Color="Color.Error" Size="Size.Medium" 
            @onclick="() => {
                SearchOpen = false;
                OnClose.InvokeAsync();
            }"/>
    </div>
    
</MudPopover>

@code {
    //[CascadingParameter(Name="RecipeParam")]
    //public Recipe? Recipe { get; set; }
    [Parameter]
    public int CursorStart { get; set; }
    [Parameter]
    public int CursorEnd { get; set; }
    [Parameter]
    public bool SearchOpen { get; set; }
    [Parameter]
    public string Text { get; set; }
    [Parameter]
    public EventCallback<string> OnLinkAdded { get; set; }
    [Parameter]
    public EventCallback OnClose { get; set; }
    private Recipe? _searchRecipe;
    private string _linkText;
    protected override async Task OnParametersSetAsync() {
        base.OnParametersSetAsync();
        Console.WriteLine(Text == null);
        _linkText = Text.Substring(CursorStart, CursorEnd - CursorStart);        
    }

    public void ReplaceTextWithLink() {
        if (_searchRecipe == null) {
            SearchOpen = false;
            OnClose.InvokeAsync();
        } else {
            if (_linkText == string.Empty) {
                _linkText = _searchRecipe.Name;
            }
            string startText = Text.Substring(0, CursorStart);
            string endText = Text.Substring(CursorEnd);
            //string spanText = Text.Substring(CursorStart, CursorEnd - CursorStart);
            Text = startText + $"@{_searchRecipe?.RecipeId}/{_linkText}@" + endText;
            OnLinkAdded.InvokeAsync(Text);
            SearchOpen = false;
        }

    }

    private void RecipeChanged(Recipe r) {
        _searchRecipe = r;
    }

    private async Task<IEnumerable<Recipe>> SearchFunction(string inputString) {
        return await _recipeService.GetRecipesAsync(r => r.Name.ToLower().Contains(_searchRecipe.Name)
            || r.RecipeIngredients.Any(ri => ri.Name.ToLower().Contains(_searchRecipe.Name))
            || r.RecipeTags.Any(rt => rt.Tag.Name.ToLower().Contains(_searchRecipe.Name)), _searchRecipe.Name);
    }
}
