@using Microsoft.AspNetCore.Identity;
@inject RecipeAZ.Services.RecipeService _recipeService
@inject IDialogService _dialogService

<div class="Details-comments-shared">
    @Recipe?.Comments?.Count() comments:
    @{
        var orderedComments = _recipeService.Recipe?.Comments?.OrderBy(c => c.CreatedAt);
        @if (orderedComments != null) {
            @foreach (Comment c in orderedComments) {
                
                <div>@c.User?.UserName said at @c.CreatedAt.ToString("yyyy-MM-dd HH:mm"):</div>
                <div>@c.Text</div>
                @if (CommentUser?.Id == c.User.Id) {
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" @onclick="async () => {
                        await ShowCommentDeleteConfirmation(c);
                    }" />
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" @onclick="() => {
                        commentEditOpen = true;
                        EditComment = c;
                    }" />
                }
                <hr style="color:#fac951">
            }
        }        
    }
    <AuthorizeView>
    <Authorized>
        <MudToggleIconButton @bind-Toggled="addingComment"
            Icon="@Icons.Material.Filled.Comment"
            ToggledIcon="@Icons.Material.Filled.ExpandLess"
            Size="Size.Small" />
        @if (addingComment) {
            <MudTextField @bind-Value="CurrentComment" Variant="Variant.Outlined" Lines="2" />
            <MudIconButton Icon="@Icons.Material.Filled.AddComment" Size="Size.Small" @onclick="async () => await AddComment()" />
        }
    </Authorized>
    </AuthorizeView>
    
</div>

<MudPopover Open="@commentEditOpen" Fixed="false" Class="px-4 pt-4">
    <div class="d-flex flex-column">
        <MudTextField @bind-Value="EditComment!.Text" Lines="3"/>
        <MudIconButton Icon="@Icons.Material.Filled.Save" Class="ml-auto mr-n3 mb-1" Color="Color.Error" @onclick="async () => {       
            commentEditOpen = false;
            await _recipeService.SaveRecipeAsync(_recipeService.Recipe.RecipeId);
        }" />
    </div>
</MudPopover>

@code {
    [CascadingParameter(Name = "RecipeParam")]
    public Recipe? Recipe { get; set; }
    [CascadingParameter(Name = "UserParam")]
    public AppUser? CommentUser { get; set; }
    public bool addingComment = false;
    public bool commentEditOpen = false;
    public string CurrentComment { get; set; } = string.Empty;
    private Comment? EditComment { get; set; }

    private async Task AddComment() {
        addingComment = false;
        if (_recipeService.Recipe != null && _recipeService.Recipe.Comments != null) {
            Comment comment = new Comment {
                UserId = CommentUser?.Id ?? "1",
                RecipeId = Recipe.RecipeId,
                Text = CurrentComment
                };
            await _recipeService.AddComment(comment);
        }        
    }

    private async Task ShowCommentDeleteConfirmation(Comment c) {
        bool? result = await _dialogService.ShowMessageBox(
            "Are you sure?",
            "Deleting your comment cannot be undone.",
            yesText: "Delete it", noText: "I take it back");
        if (result ?? false) {
            await _recipeService.RemoveComment(c);
        }
    }
}