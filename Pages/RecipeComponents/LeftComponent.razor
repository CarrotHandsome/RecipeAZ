@inject DataContext dataContext
@inject NavigationManager navigationManager
@inject ISnackbar snackBar

<MudPaper Class="ml-0 pl-0">
    <MudGrid Spacing="0">
        <MudItem xs="10">
            <MudTabs Rounded="true" ApplyEffectsToContainer="true" 
                PanelClass="pa-6"  MinimumTabWidth="100px">
                <MudTabPanel Text="Overview">
                    <OverViewComponent />
                </MudTabPanel>
                <MudTabPanel Text="Ingredients">
                    <IngredientsComponent @ref="_ingredientsRef" />
                </MudTabPanel>
                <MudTabPanel Text="Steps">
                    <StepsComponent />
                </MudTabPanel>               
            </MudTabs>
        </MudItem>
        <MudItem>
            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                @if (CanEdit) {
                    <MudMenuItem Icon="@Icons.Material.Filled.Edit" @onclick="OnEditClick" />
                    <MudMenuItem @onclick="() => SaveRecipe(true)">Save</MudMenuItem>
                    <MudMenuItem @onclick="() => RemoveRecipe()">Delete</MudMenuItem>
                }                
                <MudMenuItem>Copy</MudMenuItem>
            </MudMenu>
        </MudItem>
    </MudGrid>
</MudPaper>


@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public EventCallback<bool> OnEditUpdate { get; set; }

    [CascadingParameter(Name = "EditingParam")]
    protected bool Editing { get; set; }
    [CascadingParameter(Name = "CanEditParam")]
    protected bool CanEdit { get; set; }
    [CascadingParameter(Name = "RecipeParam")]
    public Recipe Recipe { get; set; }
    [CascadingParameter(Name = "UserParam")]
    public AppUser User { get; set; }
    private IngredientsComponent _ingredientsRef;
    public string? button;
    private bool ActionsVisible { get; set; }
    public void NavigateHandler(string button) {
        this.button = button;
    }

    private async Task OnEditClick() {
        Editing = !Editing;
        await OnEditUpdate.InvokeAsync(Editing);
    }

    private async Task SaveRecipe(bool fromCreator = true)
    {
        Console.WriteLine("Saving Ingredients");
        //await _ingredientsRef.UpdateAddedIngredient();
        if (Id != null)
        {
            dataContext.Recipes.Update(Recipe!);
            Console.WriteLine("updating recipe");
        }
        else
        {
            await dataContext.Recipes.AddAsync(Recipe!);
            Console.WriteLine("added recipe..");
            //dataContext.Recipes.Update(EditRecipe!);
        }

        Console.WriteLine("Saving changes...");
        try {
            await dataContext.SaveChangesAsync();
        } catch (Exception ex) {
            Console.WriteLine($"EXCEPTION: {ex}");
        }
        _ingredientsRef.LastItem = new();
        Console.WriteLine("Saved");
        if (fromCreator)
        {
            snackBar.Configuration.PositionClass = MudBlazor.Defaults.Classes.Position.BottomCenter;
            snackBar.Configuration.VisibleStateDuration = 500;
            snackBar.Add("Saved Recipe", MudBlazor.Severity.Success);
        }
        navigationManager.NavigateTo($"/recipe/{Recipe!.RecipeId}");
    }

    private async Task RemoveRecipe() {
        if (Recipe.RecipeId == null) {
            snackBar.Configuration.PositionClass = MudBlazor.Defaults.Classes.Position.TopCenter;            
            snackBar.Configuration.VisibleStateDuration = 400;
            snackBar.Configuration.ShowTransitionDuration = 300;
            snackBar.Add("Recipe has not been saved yet.", MudBlazor.Severity.Warning);
        } else {
            dataContext.Recipes.Remove(Recipe);
            dataContext.SaveChanges();
            navigationManager.NavigateTo($"/profile/{ User.Id }");
            snackBar.Configuration.PositionClass = MudBlazor.Defaults.Classes.Position.TopCenter;
            snackBar.Configuration.VisibleStateDuration = 500;
            snackBar.Configuration.ShowTransitionDuration = 300;
            snackBar.Add("Recipe removed.", MudBlazor.Severity.Normal);
        }
    }

}
