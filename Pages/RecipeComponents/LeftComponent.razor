@inject IDbContextFactory<DataContext> _contextFactory
@inject NavigationManager navigationManager
@inject ISnackbar snackBar
@inject IDialogService dialogService

<MudPaper Class="ml-0 pl-0">
    <MudGrid Spacing="0">
        <MudItem xs="10">
            <MudTabs Rounded="true" ApplyEffectsToContainer="true" 
                PanelClass="pa-6"  MinimumTabWidth="100px">
                <MudTabPanel Text="Overview">
                    <OverViewComponent />
                </MudTabPanel>
                <MudTabPanel Text="Ingredients">
                    <IngredientsComponent @ref="_ingredientsRef" />
                </MudTabPanel>
                <MudTabPanel Text="Steps">
                    <StepsComponent />
                </MudTabPanel>               
            </MudTabs>
        </MudItem>
        <MudItem>
            <MudMenu Icon="@Icons.Material.Filled.Menu">
                @if (CanEdit) {
                    <MudMenuItem Icon="@Icons.Material.Filled.Edit" @onclick="OnEditClick" />
                    <MudMenuItem @onclick="() => SaveRecipe(true)">Save</MudMenuItem>
                    <MudMenuItem OnClick="async () => await ShowDeleteConfirmation()">Delete</MudMenuItem>
                }                
                <MudMenuItem @onclick="async () => await CopyRecipe()">Copy</MudMenuItem>
            </MudMenu>
        </MudItem>
    </MudGrid>
</MudPaper>



@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public EventCallback<bool> OnEditUpdate { get; set; }

    [CascadingParameter(Name = "EditingParam")]
    protected bool Editing { get; set; }
    [CascadingParameter(Name = "CanEditParam")]
    protected bool CanEdit { get; set; }
    [CascadingParameter(Name = "RecipeParam")]
    public Recipe Recipe { get; set; }
    [CascadingParameter(Name = "UserParam")]
    public AppUser User { get; set; }
    private DataContext? _dataContext;
    private IngredientsComponent _ingredientsRef;
    public string? button;
    private bool ActionsVisible { get; set; }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        _dataContext = await _contextFactory.CreateDbContextAsync();
    }
    public void NavigateHandler(string button) {
        this.button = button;
    }

    private async Task OnEditClick() {
        Editing = !Editing;
        await OnEditUpdate.InvokeAsync(Editing);
    }

    private async Task SaveRecipe(bool fromCreator = true)
    {
        Console.WriteLine("Saving Ingredients");
        Console.ForegroundColor = ConsoleColor.Green;
        Console.WriteLine("ID: " + Id);
        Console.ResetColor();
        //await _ingredientsRef.UpdateAddedIngredient();
        if (Id != null)
        {
            _dataContext.Recipes.Update(Recipe!);
            Console.WriteLine("updating recipe");
        }
        else
        {
            await _dataContext.Recipes.AddAsync(Recipe!);
            Console.WriteLine("added recipe..");
            //_dataContext.Recipes.Update(EditRecipe!);
        }

        Console.WriteLine("Saving changes...");
        try {
            await _dataContext.SaveChangesAsync();
        } catch (Exception ex) {
            Console.WriteLine($"EXCEPTION: {ex}");
        }
        _ingredientsRef.LastItem = new();
        Console.WriteLine("Saved");
        if (fromCreator)
        {
            snackBar.Configuration.PositionClass = MudBlazor.Defaults.Classes.Position.BottomCenter;
            snackBar.Configuration.VisibleStateDuration = 500;
            snackBar.Add("Saved Recipe", MudBlazor.Severity.Success);
        }
        Console.WriteLine(Recipe!.RecipeId);
        navigationManager.NavigateTo($"/recipe/{Recipe!.RecipeId}");
    }

    private async Task RemoveRecipeAsync() {

        if (Recipe.RecipeId == null) {
            snackBar.Configuration.PositionClass = MudBlazor.Defaults.Classes.Position.TopCenter;
            snackBar.Configuration.VisibleStateDuration = 400;
            snackBar.Configuration.ShowTransitionDuration = 300;
            snackBar.Add("Recipe has not been saved yet.", MudBlazor.Severity.Warning);
        } else {
            _dataContext.Recipes.Remove(Recipe);
            await _dataContext.SaveChangesAsync();
            navigationManager.NavigateTo($"/profile/{User.Id}");
            snackBar.Configuration.PositionClass = MudBlazor.Defaults.Classes.Position.TopCenter;
            snackBar.Configuration.VisibleStateDuration = 500;
            snackBar.Configuration.ShowTransitionDuration = 300;
            snackBar.Add("Recipe removed.", MudBlazor.Severity.Normal);
        }
    }
    private async Task ShowDeleteConfirmation() {
        bool? result = await dialogService.ShowMessageBox(
            "Are you sure?",
            "Deleting your recipe cannot be undone.",
            yesText:"Delete it", noText:"I take it back");
        if (result ?? false) {
            await RemoveRecipeAsync(); 
        }
    }
    private async Task CopyRecipe() {
        Console.WriteLine("copying");
        Recipe copy = new Recipe {
            Name = "Copy of " + Recipe.Name,
            Description = Recipe.Description,
            Notes = Recipe.Notes,
            RecipeSteps = new List<RecipeStep>(),
            RecipeIngredients = new List<RecipeIngredient>(),
            ImagePath = Recipe.ImagePath,
            ParentRecipeId = Recipe.RecipeId,
            ChildRecipes = new List<Recipe>(),
            RecipeTags = Recipe.RecipeTags

        };
        copy.RecipeSteps = new List<RecipeStep>();
        foreach (RecipeStep step in Recipe.RecipeSteps) {
            RecipeStep copyStep = new RecipeStep {
                Name = step.Name,
                Description = step.Description,
                Details = step.Details,
                Recipe = copy,
                Order = step.Order
            };
            copy.RecipeSteps.Add(copyStep);
        }
        copy.RecipeIngredients = new List<RecipeIngredient>();
        foreach (RecipeIngredient ri in Recipe.RecipeIngredients) {
            RecipeIngredient copyIngredient = new RecipeIngredient {
                    Name = ri.Name,
                    IngredientId = ri.IngredientId,
                    Notes = ri.Notes,
                    Amount = ri.Amount,
                    Order = ri.Order
                };
            copy.RecipeIngredients.Add(copyIngredient);
        }
        User.Recipes.Add(copy);
        _dataContext.Users.Update(User);
        try {
            Console.WriteLine("adding to datacontext");
            await _dataContext.Recipes.AddAsync(copy);
            await _dataContext.SaveChangesAsync();
            Console.WriteLine(copy.RecipeId);
            navigationManager.NavigateTo($"/recipe/{copy.RecipeId}", true);
            //StateHasChanged();
        } catch(Exception e) {
            Console.WriteLine(e);
        }        
    }

}
