@inject RecipeAZ.Services.RecipeService _recipeService
@inject IDbContextFactory<DataContext> _contextFactory
@inject IJSRuntime _jsRuntime
@inherits EditableList<RecipeStep>

<div style="color:black">
        <MudPaper MinWidth="400px" Elevation="0">
            <MudList Class="pl-0">
                @foreach (RecipeStep rs in ItemRecipe!.RecipeSteps!.OrderBy(rs => rs.Order)) {
                    bool hasNoDetails = rs.Details == string.Empty;
                    <MudListItem>
                        <MudGrid>
                            <div class="d-flex d-row">
                                @if (CanEdit && Editing) {
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" @onclick="async (e) => {
                                        await _recipeService.RemoveRecipeStep(ItemRecipe, rs);
                                    }" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" @onclick="() => {
                                        originalDescription = rs.Description;
                                        originalDetails = rs.Details;
                                        stepEditOpen = true;
                                        editingStep = rs;
                                    }" />
                                }
                                <div style="margin-top: 0.75rem; margin-bottom: 0;"><TextLinkMixComponent Text="@rs.Description" /></div>
                                <MudToggleIconButton @bind-Toggled="detailsOpen[rs]"
                                    Icon="@DetailsToggleIcon(rs)"
                                    ToggledIcon="@Icons.Material.Filled.ExpandMore"
                                    Disabled="@hasNoDetails" />
                            </div>
                            @if (detailsOpen[rs]) {
                                <MudItem xs="12">
                                    <MudPaper Class="pl-2" Elevation="0" Style="font-style:italic;"><TextLinkMixComponent Text="@rs.Details" /></MudPaper>
                                </MudItem>                                
                            }
                        </MudGrid> 
                    </MudListItem>
                }                
            </MudList>
        </MudPaper>   
        @if (CanEdit && Editing) {
            <MudToggleIconButton @bind-Toggled="@ShowNewStepInput"
                Icon="@Icons.Material.Filled.Add"
                ToggledIcon="@Icons.Material.Filled.Remove" />
        @if (ShowNewStepInput) {
            @*<MudTextField @bind-Value="LastItem.Name" Label="New Step" Immediate="true"></MudTextField>*@
            <MudTextField @bind-Value="LastItem.Description" Label="New Step" Lines="3"></MudTextField>
            <MudTextField @bind-Value="LastItem.Details" Label="Details" Lines="5"></MudTextField>
            <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Disabled="@CannotAddItem" aria-label="add" @onclick="(e) => {
                    RecipeStep newStep = new RecipeStep {
                        Name = LastItem.Name,
                        Description = LastItem.Description,
                        Details = LastItem.Details,
                        Recipe = ItemRecipe
                    };
                    newStep.Order = ItemRecipe.RecipeSteps.Count() + 1;
                    ItemRecipe!.RecipeSteps!.Add(newStep);
                    detailsOpen[newStep] = true;
                    LastItem = new();
                    ShowNewStepInput = false;
                    StateHasChanged();
            }" />
        }
    }            
</div>

@if (ItemRecipe != null) {
    <MudPopover Open="@stepEditOpen" Fixed="false" Class="px-4 pt-4">
        <div class="d-flex flex-column">
            <div class="d-flex d-row">
                <MudTextField @bind-Value="editingStep.Description" Variant="Variant.Text" Label="Describe the step" Lines="3" id="linkable-step-description" />
                <MudIconButton Icon="@Icons.Material.Filled.ContentPasteSearch"
                    Title="Insert link to another recipe"
                    @onclick="async () => {
                        _editText = editingStep.Description;
                        CurrentEditAction = new Action<string>((newText) => editingStep.Description = newText);
                        await OnSearchLinkClick(_descriptionId);
                    }" />
            </div>
            <div class="d-flex d-row">
                <MudTextField @bind-Value="editingStep.Details" Variant="Variant.Text" Label="Give more specific instructions" Lines="5" id="linkable-step-details" />
                <MudIconButton Icon="@Icons.Material.Filled.ContentPasteSearch"
                    Title="Insert link to another recipe"
                        @onclick="async () => {
                            _editText = editingStep.Details;
                            CurrentEditAction = new Action<string>((newText) => editingStep.Details = newText);
                            await OnSearchLinkClick(_detailsId);
                        }" />
            </div>
            
            <div class="d-flex d-row">
                Dont forget to save your recipe!
                <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Class="ml-auto mr-0 mb-1" Color="Color.Success" Size="Size.Large" @onclick="async () => {
                    stepEditOpen = false;
                    StateHasChanged();
                }" />
                <MudIconButton Icon="@Icons.Material.Filled.Cancel" Class="ml-0 mr-0 mb-1" Color="Color.Error" Size="Size.Large" @onclick="async () => {
                    editingStep.Description = originalDescription;
                    editingStep.Details = originalDetails;
                    
                    stepEditOpen = false;
                    StateHasChanged();
                }" />
            </div>            
        </div>
        <InsertRecipeLinkComponent Text="@_editText" CursorStart="@_cursorStart" CursorEnd="@_cursorEnd"
            SearchOpen="@_searchLinkOpen" OnLinkAdded="HandleLinkAdded" OnClose="() => _searchLinkOpen=false" />
    </MudPopover>
}

@code {
    private bool ShowNewStepInput { get; set; } = false;
    private Action<string> CurrentEditAction { get; set; }
    private Dictionary<RecipeStep, bool> detailsOpen = new Dictionary<RecipeStep, bool>();
    private bool stepEditOpen = false;
    private RecipeStep? editingStep;
    private string originalDescription;
    private string originalDetails;
    private RecipeStep tempStep;
    private string _editText = string.Empty;
    private bool _searchLinkOpen = false;
    private int _cursorStart;
    private int _cursorEnd;
    private string _descriptionId = "linkable-step-description";
    private string _detailsId = "linkable-step-details";

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        //DataContext = await _contextFactory.CreateDbContextAsync();
        if (ItemRecipe != null && ItemRecipe.RecipeSteps != null) {
            foreach (RecipeStep rs in ItemRecipe.RecipeSteps) {
                detailsOpen[rs] = false;
            }
        }
    }
    private string DetailsToggleIcon(RecipeStep rs) {
        return rs.Details == string.Empty ? null : Icons.Material.Filled.ChevronRight;
    }

    private async Task OnSearchLinkClick(string id) {
        CursorSpan span = await GetCursorSpan(id);
        _cursorStart = span.Item1;
        _cursorEnd = span.Item2;
        _searchLinkOpen = true;
    }
    private async Task<CursorSpan> GetCursorSpan(string id) {
        CursorSpan result = await _jsRuntime.InvokeAsync<CursorSpan>("getCursorPosition", id);
        return result;
    }

    private void HandleLinkAdded(string newText) {
        CurrentEditAction?.Invoke(newText);
        _searchLinkOpen = false;
    }
}