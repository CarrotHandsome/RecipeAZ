@using RecipeAZ.Models
@using Microsoft.EntityFrameworkCore
@using RecipeAZ.Interfaces
@inject RecipeAZ.Services.RecipeService _recipeService
@inject IDbContextFactory<DataContext> _contextFactory
@inherits EditableList<RecipeStep>

<div>
    <h4>Steps</h4>
        <MudPaper MinWidth="400px" Elevation="0">
            <MudList Class="pl-0">
                @foreach (RecipeStep rs in ItemRecipe!.RecipeSteps!.OrderBy(rs => rs.Order)) {
                    bool hasNoDetails = rs.Details == string.Empty;
                    <MudListItem>
                        <MudGrid>
                            <MudItem>                                
                                <div style="margin-top: 0.75rem; margin-bottom: 0;"><TextLinkMixComponent Text="@rs.Description" /></div>                                
                            </MudItem>
                            <MudItem>
                                <MudToggleIconButton @bind-Toggled="detailsOpen[rs]"
                                    Icon="@DetailsToggleIcon(rs)"
                                    ToggledIcon="@Icons.Material.Filled.ExpandMore"
                                    Disabled="@hasNoDetails" />
                            </MudItem>
                            @if (CanEdit && Editing) {
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" @onclick="async (e) => {
                                    await _recipeService.RemoveRecipeStep(ItemRecipe, rs);
                                }" />
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" @onclick="() => {
                                    originalDescription = rs.Description;
                                    originalDetails = rs.Details;
                                    stepEditOpen = true;
                                    editingStep = rs;
                                }" />
                            }
                        </MudGrid>                    
                        @if (detailsOpen[rs]) {
                        <MudPaper Class="pl-3" Elevation="0" Style="font-style:italic;"><TextLinkMixComponent Text="@rs.Details" /></MudPaper>
                        }
                        
                    </MudListItem>
                }                
            </MudList>
        </MudPaper>   
        @if (CanEdit && Editing) {
            <MudToggleIconButton @bind-Toggled="@ShowNewStepInput"
                Icon="@Icons.Material.Filled.Add"
                ToggledIcon="@Icons.Material.Filled.Remove" />
        @if (ShowNewStepInput) {
            @*<MudTextField @bind-Value="LastItem.Name" Label="New Step" Immediate="true"></MudTextField>*@
            <MudTextField @bind-Value="LastItem.Description" Label="New Step" Lines="3"></MudTextField>
            <MudTextField @bind-Value="LastItem.Details" Label="Details" Lines="5"></MudTextField>
            <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.Add" Disabled="@CannotAddItem" aria-label="add" @onclick="(e) => {
                    RecipeStep newStep = new RecipeStep {
                        Name = LastItem.Name,
                        Description = LastItem.Description,
                        Details = LastItem.Details,
                        Recipe = ItemRecipe
                    };
                    newStep.Order = ItemRecipe.RecipeSteps.Count() + 1;
                    ItemRecipe!.RecipeSteps!.Add(newStep);
                    detailsOpen[newStep] = true;
                    LastItem = new();
                    ShowNewStepInput = false;
                    StateHasChanged();
            }" />
        }
    }            
</div>

@if (ItemRecipe != null) {
    <MudPopover Open="@stepEditOpen" Fixed="false" Class="px-4 pt-4">
        <div class="d-flex flex-column">
            
            <MudTextField @bind-Value="editingStep.Description" Variant="Variant.Text" Label="Describe the step" Lines="3" />
            <MudTextField @bind-Value="editingStep.Details" Variant="Variant.Text" Label="Give more specific instructions" Lines="5" />
            <div class="d-flex d-row">
                Dont forget to save your recipe!
                <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Class="ml-auto mr-0 mb-1" Color="Color.Success" Size="Size.Large" @onclick="async () => {
                    stepEditOpen = false;
                    StateHasChanged();
                }" />
                <MudIconButton Icon="@Icons.Material.Filled.Cancel" Class="ml-0 mr-0 mb-1" Color="Color.Error" Size="Size.Large" @onclick="async () => {
                    editingStep.Description = originalDescription;
                    editingStep.Details = originalDetails;
                    
                    stepEditOpen = false;
                    StateHasChanged();
                }" />
            </div>
            
        </div>
    </MudPopover>
}

@code {
    private bool ShowNewStepInput { get; set; } = false;
    
    private Dictionary<RecipeStep, bool> detailsOpen = new Dictionary<RecipeStep, bool>();
    private bool stepEditOpen = false;
    private RecipeStep? editingStep;
    private string originalDescription;
    private string originalDetails;
    private RecipeStep tempStep;

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        //DataContext = await _contextFactory.CreateDbContextAsync();
        if (ItemRecipe != null && ItemRecipe.RecipeSteps != null) {
            foreach (RecipeStep rs in ItemRecipe.RecipeSteps) {
                detailsOpen[rs] = false;
            }
        }
    }
    //private async Task UpdateAndSaveRecipe() {
    //    if (ItemRecipe != null) {
    //        DataContext.Update(ItemRecipe);
    //        await DataContext.SaveChangesAsync();
    //        RecipeSnack.Add("Saved Recipe");
    //        StateHasChanged();
    //    }
    //}
    private string DetailsToggleIcon(RecipeStep rs) {
        return rs.Details == string.Empty ? null : Icons.Material.Filled.ChevronRight;
    }
}