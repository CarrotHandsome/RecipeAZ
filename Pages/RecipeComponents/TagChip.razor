@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager _navManager

<MudChip Variant="@Variant" Size="@Size" Color="@Color" Class="@_clickable">
    <MudText @onclick="() => NavigateToTag()" >@Tag?.Name</MudText>
    @if (Removable) {
        <MudIconButton Icon="@Icons.Material.Outlined.Cancel"
            Color="Color.Default" Size="Size.Small"
            OnClick="@(() => HandleChipClose.InvokeAsync(Tag))" />
    }
</MudChip>

@code {
    [Parameter]
    public Tag Tag { get; set; }
    [Parameter]
    public bool Clickable { get; set; } = true;
    [Parameter]
    public bool Removable { get; set; } = false;
    [Parameter]
    public Size Size { get; set; } = Size.Small;
    [Parameter]
    public Color Color { get; set; } = Color.Default;
    [Parameter]
    public Variant Variant { get; set; } = Variant.Filled;
    [Parameter]
    public EventCallback<Tag> HandleChipClose { get; set; }
    private string _clickable = "";

    protected override void OnInitialized() {
        base.OnInitialized();
        if (Clickable) {
            _clickable = "clickable";
        }
    }
    public void NavigateToTag() {
        try {
            var queryParams = new Dictionary<string, string> {
                    ["tag"] = Tag.Name,                    
                };

            var query = QueryHelpers.AddQueryString("/browse", queryParams);
            _navManager.NavigateTo(query);
        } catch(Exception e) {
            Console.WriteLine($"EXCEPTION: {e}");
        }

    }

}