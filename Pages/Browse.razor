@page "/browse/{terms}"
@page "/browse"

@inject IDbContextFactory<DataContext> _contextFactory




    
<MudText Typo="Typo.h6">Search Results</MudText>
<MudGrid Spacing="0">
    <MudItem>
        <MudTextField @bind-Value="_searchText" Label="Filter by search term" Variant="Variant.Outlined" TextChanged="UpdateRecipes"></MudTextField>
    </MudItem>
    <MudItem Class="vcenter">
        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Large"
            OnClick="UpdateRecipes"
        />
    </MudItem>
</MudGrid>


<MudGrid>
    <MudItem xs="12">
        <MudGrid>
            <MudItem>
                <MudAutocomplete T="string" Label="Filter by tag" Immediate="true"
                    Value="TagFilterSearchText" SearchFunc="TagAutoCompleteSearch" TextChanged="UpdateTagSearchText"/>
            </MudItem>
            <MudItem Class="d-flex align-center pl-0">
                <MudIconButton Icon="@Icons.Material.Filled.Add" 
                    OnClick="AddTagFilter" />
                @foreach (Tag tag in _tagsFilter) {
                    <MudChip Variant="Variant.Outlined" Size="Size.Small">
                        <MudText>@tag.Name</MudText>
                        <MudIconButton Icon="@Icons.Material.Filled.Cancel" Color="Color.Default" Size="Size.Small"
                            @onclick="() => HandleTagFilterClose(tag)"/>
                    </MudChip>
                }
            </MudItem>
        </MudGrid>
        
    </MudItem>
    <MudItem xs="12">
        <MudGrid>
            <MudItem>
                <MudAutocomplete T="string" Label="Filter by ingredient"
                    Value="IngredientFilterSearchText" SearchFunc="IngredientAutoCompleteSearch" TextChanged="UpdateIngredientSearchText" />
            </MudItem>
            <MudItem Class="d-flex align-center pl-0">
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddIngredientFilter"/>
                @foreach (Ingredient i in _ingredientsFilter) {
                    <MudChip Variant="Variant.Outlined" Size="Size.Small">
                        <MudText>@i.Name</MudText>
                        <MudIconButton Icon="@Icons.Material.Filled.Cancel" Color="Color.Default" Size="Size.Small"
                            @onclick="() => HandleIngredientFilterClose(i)" />
                    </MudChip>
                }
            </MudItem>
        </MudGrid>
    </MudItem>
</MudGrid>
<p/>
<MudTable Items="@_recipes" Dense="true" RowsPerPage="@_rowsPerPage">
   
   
    <RowTemplate>
        <MudTd>@context.Name</MudTd>
        <MudTd>by @context.User.UserName</MudTd>
        <MudTd><div class="browse-text-limit-width">@context.Description</div></MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
@code {
    [Parameter]
    public string Terms { get; set; } = string.Empty;
    private string _searchText = string.Empty;
    public string TagFilterSearchText { get; set; } = string.Empty;
    public string IngredientFilterSearchText { get; set; } = string.Empty;
    private List<Recipe>? _recipes = new();
    private int _rowsPerPage = 15;
    private DataContext _dataContext;
    private List<Tag>? _tagsFilter = new();
    private List<Ingredient>? _ingredientsFilter = new();

    private List<Recipe> SearchResults {
        get {
            List<Recipe> recipes = _dataContext.Recipes
            .Include(r => r.User)
            .Include(r => r.RecipeIngredients)
                .ThenInclude(ri => ri.Ingredient)
            .Include(r => r.RecipeTags)
                .ThenInclude(rt => rt.Tag)
            .Where(r => r.Name.ToLower().Contains(_searchText.ToLower())
            || r.RecipeIngredients.Any(ri => ri.Ingredient.Name.ToLower().Contains(_searchText.ToLower()))
            || r.RecipeTags.Any(rt => rt.Tag.Name.ToLower().Contains(_searchText)) || string.IsNullOrEmpty(_searchText.ToLower()))
            .Select(r => r).ToList();

            recipes = recipes.Where(r =>
            {
                return ((_tagsFilter.Count <= 0 || _tagsFilter.All(t => r.RecipeTags.Any(rt => rt.TagId == t.TagId)))
                    && (_ingredientsFilter.Count <= 0 || _ingredientsFilter.All(i => r.RecipeIngredients.Any(ri => ri.IngredientId == i.IngredientId))));
            }).Select(r => r).ToList();
            //}((_tagsFilter.Count <= 0 || _tagsFilter.All(t => r.RecipeTags.Any(rt => rt.Tag == t))) 
            //&& (_ingredientsFilter.Count <= 0 || r.RecipeIngredients.Any(ri => _ingredientsFilter.Contains(ri.Ingredient))))
            //.Select(r => r).ToList();
            //.Where(r => _tagsFilter.Count <= 0 || _tagsFilter.All(t => r.RecipeTags.Any(rt => rt.Tag == t)))
            //.Where(r => )

            return recipes;
        }
    }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        Console.WriteLine("finished browse init");
        _dataContext = _contextFactory.CreateDbContext();
        _searchText = Terms ?? string.Empty;
        _recipes = SearchResults;
    }

    private async Task<IEnumerable<string>> TagAutoCompleteSearch(string value) {
        if (string.IsNullOrEmpty(value)) {
            return new List<string>();
        }
        List<string> filteredTags;
        try {
            filteredTags = await _dataContext.Tags.Where(t => t.Name.ToLower().Contains(value.ToLower()))
            .Select(t => t.Name)
            .ToListAsync();
        } catch(Exception e) {
            Console.WriteLine(e);
            filteredTags = new();
        }        
        return filteredTags;
    }
    private async Task<IEnumerable<string>> IngredientAutoCompleteSearch(string value) {
        if (string.IsNullOrEmpty(value)) {
            return new List<string>();
        }
        List<string> filteredIngredients;
        try {
            filteredIngredients = await _dataContext.Ingredients.Where(i => i.Name.ToLower().Contains(value.ToLower()))
            .Select(t => t.Name)
            .ToListAsync();

        } catch (Exception e) {
            Console.WriteLine(e);
            filteredIngredients = new();
        }
        return filteredIngredients;
    }
    private void UpdateTagSearchText(string value) {
        TagFilterSearchText = value;
    }
    private void UpdateIngredientSearchText(string value) {
        IngredientFilterSearchText = value;
    }
    private async Task AddTagFilter() {
        Tag tag = _dataContext.Tags            
            .Where(t => t.Name.ToLower() == TagFilterSearchText.ToLower()).FirstOrDefault();
        if (tag != null) {
            _tagsFilter.Add(tag);
            _recipes = SearchResults;
            UpdateTagSearchText(string.Empty);
        }
    }
    private async Task AddIngredientFilter() {
        Ingredient ingredient = _dataContext.Ingredients
            .Where(ingredient => ingredient.Name.ToLower() == IngredientFilterSearchText.ToLower()).FirstOrDefault();
        if (ingredient != null) {
            _ingredientsFilter.Add(ingredient);
            _recipes = SearchResults;
        }
    }
    private void UpdateRecipes() {
        _recipes = SearchResults;
        StateHasChanged();
    }

    private void HandleTagFilterClose(Tag tag) {
        _tagsFilter.Remove(tag);
        _recipes = SearchResults;
        StateHasChanged();
    }
    private void HandleIngredientFilterClose(Ingredient ingredient) {
        _ingredientsFilter.Remove(ingredient);
        _recipes = SearchResults;
        StateHasChanged();
    }

}
