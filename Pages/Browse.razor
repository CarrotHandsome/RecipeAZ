@page "/browse/{terms}"
@page "/browse"


@inject IDbContextFactory<DataContext> _contextFactory
@inject NavigationManager _navigationManager
@inject RecipeAZ.Services.RecipeService _recipeService

<div style="background-color:white;">
    <MudText Typo="Typo.h6">Search Results</MudText>
    <MudGrid Spacing="0" Class="orange-lines">
        <MudItem>
            <MudTextField @bind-Value="_searchText" Label="Filter by search term" Variant="Variant.Outlined" 
                TextChanged="UpdateRecipes"></MudTextField>
        </MudItem>
        <MudItem Class="vcenter">
            <MudIconButton Icon="@Icons.Material.Filled.Refresh" Size="Size.Large"
                OnClick="UpdateRecipes" />
        </MudItem>
    </MudGrid>

    <MudGrid>
        <MudItem xs="12">
            <MudGrid>
                <MudItem>
                    <MudAutocomplete T="string" Label="Filter by tag" Immediate="true"
                        Value="TagFilterSearchText" SearchFunc="TagAutoCompleteSearch" TextChanged="UpdateTagSearchText" />
                </MudItem>
                <MudItem Class="d-flex align-center pl-0">
                    <MudIconButton Icon="@Icons.Material.Filled.Add"
                        OnClick="AddTagFilter" />
                    @foreach (Tag tag in _tagsFilter) {
                        <MudChip Variant="Variant.Outlined" Size="Size.Small">
                            <MudText>@tag.Name</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Cancel" Color="Color.Default" Size="Size.Small"
                                @onclick="() => HandleTagFilterClose(tag)" />
                        </MudChip>
                    }
                </MudItem>
            </MudGrid>

        </MudItem>
        <MudItem xs="12">
            <MudGrid>
                <MudItem>
                    <MudAutocomplete T="string" Label="Filter by ingredient"
                        Value="IngredientFilterSearchText" SearchFunc="IngredientAutoCompleteSearch" TextChanged="UpdateIngredientSearchText" />
                </MudItem>
                <MudItem Class="d-flex align-center pl-0">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddIngredientFilter" />
                    @foreach (Ingredient i in _ingredientsFilter) {
                        <MudChip Variant="Variant.Outlined" Size="Size.Small">
                            <MudText>@i.Name</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Cancel" Color="Color.Default" Size="Size.Small"
                                @onclick="() => HandleIngredientFilterClose(i)" />
                        </MudChip>
                    }
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
    <p />
    <MudGrid Spacing="0">
        <MudItem>
            <MudIconButton Icon="@CurrentIcon" OnClick="ChangeOrderIcon" />
        </MudItem>
        <MudItem>
            <MudToggleIconButton Icon="@Icons.Material.Filled.ArrowUpward" ToggledIcon="@Icons.Material.Filled.ArrowDownward"
                ToggledChanged="() => {
                    ResultsAscending = !ResultsAscending;
                    _recipes = SearchResults;
                    StateHasChanged();
                }" />
        </MudItem>
    </MudGrid>

    <MudTable Items="@_recipes" Dense="true" RowsPerPage="@_rowsPerPage">
        <RowTemplate>
            <MudTd @onclick="() => NavigateToRecipe(context.RecipeId)" Class="clickable">@context.Name</MudTd>
            <MudTd @onclick="() => NavigateToUser(context.UserId)" Class="clickable">by @context.User.UserName</MudTd>
            <MudTd><div class="browse-text-limit-width"><RecipeAZ.Pages.RecipeComponents.TextLinkMixComponent Text="@context.Description" UseLinks="false" /> </div></MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</div>

@code {
    [Parameter]
    public string Terms { get; set; } = string.Empty;
    private string _searchText = string.Empty;
    public string TagFilterSearchText { get; set; } = string.Empty;
    public string IngredientFilterSearchText { get; set; } = string.Empty;
    //public string ResultsOrderBy { get; set; } = Icons.Material.Filled.SortByAlpha; //alpha, date, likes
    public bool ResultsAscending { get; set; } = true;
    private string[] _orderIconOptions = { Icons.Material.Filled.SortByAlpha, Icons.Material.Filled.CalendarMonth, Icons.Material.Filled.Favorite};
    private int orderIconIndex = 0;
    private string CurrentIcon => _orderIconOptions[orderIconIndex % _orderIconOptions.Length];
    private List<Recipe>? _recipes = new();
    private int _rowsPerPage = 15;
    private DataContext _dataContext;
    private List<Tag>? _tagsFilter = new();
    private List<Ingredient>? _ingredientsFilter = new();


    private List<Recipe> SearchResults {
        get {
            List<Recipe> recipes = _dataContext.Recipes
            .Include(r => r.User)
            .Include(r => r.RecipeIngredients)
                .ThenInclude(ri => ri.Ingredient)
            .Include(r => r.RecipeTags)
                .ThenInclude(rt => rt.Tag)
            .Include(r => r.UsersWhoLikeMe)
            .Where(r => r.Name.ToLower().Contains(_searchText.ToLower())
            || r.RecipeIngredients.Any(ri => ri.Ingredient.Name.ToLower().Contains(_searchText.ToLower()))
            || r.RecipeTags.Any(rt => rt.Tag.Name.ToLower().Contains(_searchText)) || string.IsNullOrEmpty(_searchText.ToLower()))
            .Select(r => r).ToList();

            recipes = recipes.Where(r => {
                return ((_tagsFilter.Count <= 0 || _tagsFilter.All(t => r.RecipeTags.Any(rt => rt.TagId == t.TagId)))
                    && (_ingredientsFilter.Count <= 0 || _ingredientsFilter.All(i => r.RecipeIngredients.Any(ri => ri.IngredientId == i.IngredientId))));
            }).Select(r => r).ToList();

            switch (orderIconIndex % _orderIconOptions.Length) {
                case 0:
                    if (ResultsAscending) {
                        recipes = recipes.OrderBy(r => r.Name).ToList();
                    } else {
                        recipes = recipes.OrderByDescending(r => r.Name).ToList();
                    }
                    break;
                case 1:
                    if (ResultsAscending) {
                        recipes = recipes.OrderBy(r => r.CreatedAt).ToList();
                    } else {
                        recipes = recipes.OrderByDescending(r => r.CreatedAt).ToList();
                    }
                    break;
                case 2:
                    if (ResultsAscending) {
                        recipes = recipes.OrderBy(r => r.UsersWhoLikeMe?.Count ?? 0).ToList();
                    } else {
                        recipes = recipes.OrderByDescending(r => r.UsersWhoLikeMe?.Count ?? 0).ToList();
                    }
                    break;
                default:
                    recipes = recipes.OrderBy(r => r.Name).ToList();
                    break;
            }
            

            

            return recipes;
        }
    }

    protected override async Task OnInitializedAsync() {
        await base.OnInitializedAsync();
        Console.WriteLine("finished browse init");
        _dataContext = _contextFactory.CreateDbContext();
        _searchText = Terms ?? string.Empty;
        _recipes = SearchResults;
    }

    private async Task<IEnumerable<string>> TagAutoCompleteSearch(string value) {
        if (string.IsNullOrEmpty(value)) {
            return new List<string>();
        }
        List<string> filteredTags;
        try {
            filteredTags = await _dataContext.Tags.Where(t => t.Name.ToLower().Contains(value.ToLower()))
            .Select(t => t.Name)
            .ToListAsync();
        } catch(Exception e) {
            Console.WriteLine(e);
            filteredTags = new();
        }        
        return filteredTags;
    }
    private async Task<IEnumerable<string>> IngredientAutoCompleteSearch(string value) {
        if (string.IsNullOrEmpty(value)) {
            return new List<string>();
        }
        List<string> filteredIngredients;
        try {
            filteredIngredients = await _dataContext.Ingredients.Where(i => i.Name.ToLower().Contains(value.ToLower()))
            .Select(t => t.Name)
            .ToListAsync();

        } catch (Exception e) {
            Console.WriteLine(e);
            filteredIngredients = new();
        }
        return filteredIngredients;
    }
    private void UpdateTagSearchText(string value) {
        TagFilterSearchText = value;
    }
    private void UpdateIngredientSearchText(string value) {
        IngredientFilterSearchText = value;
    }
    private async Task AddTagFilter() {
        Tag tag = _dataContext.Tags            
            .Where(t => t.Name.ToLower() == TagFilterSearchText.ToLower()).FirstOrDefault();
        if (tag != null) {
            _tagsFilter.Add(tag);
            _recipes = SearchResults;
            UpdateTagSearchText(string.Empty);
        }
    }
    private async Task AddIngredientFilter() {
        Ingredient ingredient = _dataContext.Ingredients
            .Where(ingredient => ingredient.Name.ToLower() == IngredientFilterSearchText.ToLower()).FirstOrDefault();
        if (ingredient != null) {
            _ingredientsFilter.Add(ingredient);
            _recipes = SearchResults;
        }
    }
    private void UpdateRecipes() {
        _recipes = SearchResults;
        StateHasChanged();
    }

    private void HandleTagFilterClose(Tag tag) {
        _tagsFilter.Remove(tag);
        _recipes = SearchResults;
        StateHasChanged();
    }
    private void HandleIngredientFilterClose(Ingredient ingredient) {
        _ingredientsFilter.Remove(ingredient);
        _recipes = SearchResults;
        StateHasChanged();
    }

    private void NavigateToRecipe(string id) {
        _navigationManager.NavigateTo($"/recipe/{id}");
    }
    private void NavigateToUser(string id) {
        _navigationManager.NavigateTo($"/profile/{id}");
    }

    private void ChangeOrderIcon() {
        orderIconIndex++;
        _recipes = SearchResults;
        StateHasChanged();
    }
}
